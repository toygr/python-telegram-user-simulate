# Please do NOT edit this file!
# URL: my.telegram.org
from telethon import TelegramClient
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.types import InputPeerUser
import csv
import os
import time
import telegram
from telegram.error import TelegramError
# Replace these with your own values
bot_token='8046490701:AAF5EnnygaVJZTmGCVVOOwseychu4pIj0FU'
bot = telegram.Bot(token=bot_token)
API_ID = 24968606
API_HASH = "7b25f027f9e0410469824abb60f8adc5"



myGroupMember=[]
client = TelegramClient('session_name', API_ID, API_HASH)
async def initialData():
    with open('members.csv','r') as membersfile:
        csv_reader=csv.reader(membersfile)
        for row in csv_reader:
            myGroupMember.append(row[0])
            
    print('initial Data', str(myGroupMember))
                        
async def main():
    await initialData()
    count=0
    await client.start()
    # myGroupName = '@Turbofutures'  
    myGroupName = '@henloportal'  
    # Open CSV file once and write header row
    with open("members.csv", "a", newline='', encoding='utf-8') as membersfile:
        csvwriter = csv.writer(membersfile)

        # Get the group entity
        group = await client.get_entity(myGroupName)

        # Iterate over chat members
        async for member in client.iter_participants(group):
            username = member.username or ''
            # Write member details including bio and avatar filename to CSV
            if username in myGroupMember:
                continue
            else:
                csvwriter.writerow([
                    username,
                ])
                myGroupMember.append(username)
        print("Completed retrieving user data!")
        
        chat_username = input("Enter the group username:\n@")    
        # Get the group entity
        group = await client.get_entity(chat_username)
        # Iterate over chat members
        async for member in client.iter_participants(group):
            username = member.username or ''
            userState=str(member.status) or ''
            offline='UserStatusOffline'
            if username in myGroupMember :
            # Get full user information
                print('This user=>',{username},'exist in my group')
                continue
            elif offline not in userState:
                # myGroup = await client.get_entity('@Turbofutures')
                myGroup = '@henloportal'  
                
                try:
                # Get the user entity
                    user_name='@'+username
                    user_to_add = await client.get_entity(user_name)
                    # Add user to group
                    await client(InviteToChannelRequest(
                        channel=myGroup,
                        users=[user_to_add],
                        # fwd_limit=100  # Allow the last 100 messages to be forwarded
                    ))
                    # Invite the user to the channel
                    # invite_link = 'https://t.me/MyFriend4453/'  # Replace with the actual invite link

                    # try:
                    #     # Send the invite link
                    #     await bot.send_message(member.id, text=f"Join our group: {invite_link}")
                    #     print("Invite link sent successfully.")
                    # except Exception as e:
                    #     print("Error sending invite link:", e)
                    count=count+1
                    csvwriter.writerow([
                        username,
                    ])
                    myGroupMember.append(username)
                    print(f"Successfully added {count, username} to the group")
                    time.sleep(2)
                    if count==15 :
                        print('timing....')
                        time.sleep(2500)
                except Exception as e:
                    # print('user id',member.id)
                    # await bot.send_message(member.id, "message1")
                    print(f"Failed to add {username}, Error:{str(e)}")
                    time.sleep(1)  
    print('Server run.....')

# Run the client

with client:
    client.loop.run_until_complete(main())